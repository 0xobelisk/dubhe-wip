  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module test_project::component7 {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use test_project::dapp_key;

  use test_project::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"component7";

  public struct Component7 has copy, drop, store {
    attack: u32,
    hp: u32,
  }

  public fun new(attack: u32, hp: u32): Component7 {
    Component7 {
            attack,
            hp,
        }
  }

  public fun attack(self: &Component7): u32 {
    self.attack
  }

  public fun hp(self: &Component7): u32 {
    self.hp
  }

  public fun update_attack(self: &mut Component7, attack: u32) {
    self.attack = attack
  }

  public fun update_hp(self: &mut Component7, hp: u32) {
    self.hp = hp
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"address"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"u32", b"u32"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"monster"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"attack", b"hp"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, monster: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_attack(dapp_hub: &DappHub, monster: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_attack(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_attack(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_hp(dapp_hub: &DappHub, monster: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_hp(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_hp(dapp_hub: &DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun delete(dapp_hub: &mut DappHub, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_attack(dapp_hub: &DappHub, monster: address): u32 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let attack = sui::bcs::peel_u32(&mut bsc_type);
    attack
  }

  public fun set_attack(dapp_hub: &mut DappHub, monster: address, attack: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value = to_bytes(&attack);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_hp(dapp_hub: &DappHub, monster: address): u32 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let hp = sui::bcs::peel_u32(&mut bsc_type);
    hp
  }

  public fun set_hp(dapp_hub: &mut DappHub, monster: address, hp: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value = to_bytes(&hp);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get(dapp_hub: &DappHub, monster: address): (u32, u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let attack = sui::bcs::peel_u32(&mut bsc_type);
    let hp = sui::bcs::peel_u32(&mut bsc_type);
    (attack, hp)
  }

  public fun set(dapp_hub: &mut DappHub, monster: address, attack: u32, hp: u32) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value_tuple = encode(attack, hp);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, monster: address): Component7 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, monster: address, component7: Component7) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&monster));
    let value_tuple = encode_struct(component7);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(attack: u32, hp: u32): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&attack));
    value_tuple.push_back(to_bytes(&hp));
    value_tuple
  }

  public fun encode_struct(component7: Component7): vector<vector<u8>> {
    encode(component7.attack, component7.hp)
  }

  public fun decode(data: vector<u8>): Component7 {
    let mut bsc_type = sui::bcs::new(data);
    let attack = sui::bcs::peel_u32(&mut bsc_type);
    let hp = sui::bcs::peel_u32(&mut bsc_type);
    Component7 {
            attack,
            hp,
        }
  }
}
