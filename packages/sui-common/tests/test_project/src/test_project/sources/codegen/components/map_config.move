  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module test_project::test_project_map_config {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use test_project::test_project_dapp_key;

  use test_project::test_project_dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"map_config";

  public struct Map_config has copy, drop, store {
    width: u64,
    height: u64,
  }

  public fun new(width: u64, height: u64): Map_config {
    Map_config {
            width,
            height,
        }
  }

  public fun width(self: &Map_config): u64 {
    self.width
  }

  public fun height(self: &Map_config): u64 {
    self.height
  }

  public fun update_width(self: &mut Map_config, width: u64) {
    self.width = width
  }

  public fun update_height(self: &mut Map_config, height: u64) {
    self.height = height
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"u64", b"u64"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"width", b"height"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = test_project_dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_width(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_width(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_width(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_height(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_height(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_height(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun delete(dapp_hub: &mut DappHub) {
    let key_tuple = vector::empty();
    dapp_service::delete_record<DappKey>(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_width(dapp_hub: &DappHub): u64 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let width = sui::bcs::peel_u64(&mut bsc_type);
    width
  }

  public fun set_width(dapp_hub: &mut DappHub, width: u64) {
    let key_tuple = vector::empty();
    let value = to_bytes(&width);
    dapp_service::set_field(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_height(dapp_hub: &DappHub): u64 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let height = sui::bcs::peel_u64(&mut bsc_type);
    height
  }

  public fun set_height(dapp_hub: &mut DappHub, height: u64) {
    let key_tuple = vector::empty();
    let value = to_bytes(&height);
    dapp_service::set_field(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get(dapp_hub: &DappHub): (u64, u64) {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let width = sui::bcs::peel_u64(&mut bsc_type);
    let height = sui::bcs::peel_u64(&mut bsc_type);
    (width, height)
  }

  public fun set(dapp_hub: &mut DappHub, width: u64, height: u64) {
    let key_tuple = vector::empty();
    let value_tuple = encode(width, height);
    dapp_service::set_record(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub): Map_config {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, map_config: Map_config) {
    let key_tuple = vector::empty();
    let value_tuple = encode_struct(map_config);
    dapp_service::set_record(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(width: u64, height: u64): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&width));
    value_tuple.push_back(to_bytes(&height));
    value_tuple
  }

  public fun encode_struct(map_config: Map_config): vector<vector<u8>> {
    encode(map_config.width, map_config.height)
  }

  public fun decode(data: vector<u8>): Map_config {
    let mut bsc_type = sui::bcs::new(data);
    let width = sui::bcs::peel_u64(&mut bsc_type);
    let height = sui::bcs::peel_u64(&mut bsc_type);
    Map_config {
            width,
            height,
        }
  }
}
