  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module test_project::test_project_encounter {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use test_project::test_project_dapp_key;

  use test_project::test_project_dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"encounter";

  public struct Encounter has copy, drop, store {
    exists: bool,
    monster: address,
    catch_attempt: u256,
  }

  public fun new(exists: bool, monster: address, catch_attempt: u256): Encounter {
    Encounter {
            exists,
            monster,
            catch_attempt,
        }
  }

  public fun exists(self: &Encounter): bool {
    self.exists
  }

  public fun monster(self: &Encounter): address {
    self.monster
  }

  public fun catch_attempt(self: &Encounter): u256 {
    self.catch_attempt
  }

  public fun update_exists(self: &mut Encounter, exists: bool) {
    self.exists = exists
  }

  public fun update_monster(self: &mut Encounter, monster: address) {
    self.monster = monster
  }

  public fun update_catch_attempt(self: &mut Encounter, catch_attempt: u256) {
    self.catch_attempt = catch_attempt
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"address"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"bool", b"address", b"u256"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"id"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"exists", b"monster", b"catch_attempt"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = test_project_dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_exists(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_exists(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_exists(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_monster(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_monster(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_monster(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun has_catch_attempt(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_has_catch_attempt(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_not_has_catch_attempt(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun delete(dapp_hub: &mut DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::delete_record<DappKey>(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_exists(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let exists = sui::bcs::peel_bool(&mut bsc_type);
    exists
  }

  public fun set_exists(dapp_hub: &mut DappHub, id: address, exists: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&exists);
    dapp_service::set_field(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_monster(dapp_hub: &DappHub, id: address): address {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let monster = sui::bcs::peel_address(&mut bsc_type);
    monster
  }

  public fun set_monster(dapp_hub: &mut DappHub, id: address, monster: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&monster);
    dapp_service::set_field(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get_catch_attempt(dapp_hub: &DappHub, id: address): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let catch_attempt = sui::bcs::peel_u256(&mut bsc_type);
    catch_attempt
  }

  public fun set_catch_attempt(dapp_hub: &mut DappHub, id: address, catch_attempt: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&catch_attempt);
    dapp_service::set_field(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, 2, value);
  }

  public fun get(dapp_hub: &DappHub, id: address): (bool, address, u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let exists = sui::bcs::peel_bool(&mut bsc_type);
    let monster = sui::bcs::peel_address(&mut bsc_type);
    let catch_attempt = sui::bcs::peel_u256(&mut bsc_type);
    (exists, monster, catch_attempt)
  }

  public fun set(dapp_hub: &mut DappHub, id: address, exists: bool, monster: address, catch_attempt: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = encode(exists, monster, catch_attempt);
    dapp_service::set_record(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, id: address): Encounter {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, id: address, encounter: Encounter) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = encode_struct(encounter);
    dapp_service::set_record(dapp_hub, test_project_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(exists: bool, monster: address, catch_attempt: u256): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&exists));
    value_tuple.push_back(to_bytes(&monster));
    value_tuple.push_back(to_bytes(&catch_attempt));
    value_tuple
  }

  public fun encode_struct(encounter: Encounter): vector<vector<u8>> {
    encode(encounter.exists, encounter.monster, encounter.catch_attempt)
  }

  public fun decode(data: vector<u8>): Encounter {
    let mut bsc_type = sui::bcs::new(data);
    let exists = sui::bcs::peel_bool(&mut bsc_type);
    let monster = sui::bcs::peel_address(&mut bsc_type);
    let catch_attempt = sui::bcs::peel_u256(&mut bsc_type);
    Encounter {
            exists,
            monster,
            catch_attempt,
        }
  }
}
