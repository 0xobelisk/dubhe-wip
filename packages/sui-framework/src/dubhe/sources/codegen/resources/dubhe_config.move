  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dubhe_config {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use dubhe::dapp_key;

  use dubhe::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"dubhe_config";

  public struct DubheConfig has copy, drop, store {
    next_asset_id: u256,
    swap_fee: u256,
    fee_to: address,
    max_swap_path_len: u64,
  }

  public fun new(next_asset_id: u256, swap_fee: u256, fee_to: address, max_swap_path_len: u64): DubheConfig {
    DubheConfig {
            next_asset_id,
            swap_fee,
            fee_to,
            max_swap_path_len,
        }
  }

  public fun next_asset_id(self: &DubheConfig): u256 {
    self.next_asset_id
  }

  public fun swap_fee(self: &DubheConfig): u256 {
    self.swap_fee
  }

  public fun fee_to(self: &DubheConfig): address {
    self.fee_to
  }

  public fun max_swap_path_len(self: &DubheConfig): u64 {
    self.max_swap_path_len
  }

  public fun update_next_asset_id(self: &mut DubheConfig, next_asset_id: u256) {
    self.next_asset_id = next_asset_id
  }

  public fun update_swap_fee(self: &mut DubheConfig, swap_fee: u256) {
    self.swap_fee = swap_fee
  }

  public fun update_fee_to(self: &mut DubheConfig, fee_to: address) {
    self.fee_to = fee_to
  }

  public fun update_max_swap_path_len(self: &mut DubheConfig, max_swap_path_len: u64) {
    self.max_swap_path_len = max_swap_path_len
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"u256", b"u256", b"address", b"u64"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"next_asset_id", b"swap_fee", b"fee_to", b"max_swap_path_len"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_next_asset_id(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_next_asset_id(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_next_asset_id(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_swap_fee(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_swap_fee(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_swap_fee(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun has_fee_to(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_has_fee_to(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_not_has_fee_to(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun has_max_swap_path_len(dapp_hub: &DappHub): bool {
    let key_tuple = vector::empty();
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun ensure_has_max_swap_path_len(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun ensure_not_has_max_swap_path_len(dapp_hub: &DappHub) {
    let key_tuple = vector::empty();
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun delete(dapp_hub: &mut DappHub) {
    let key_tuple = vector::empty();
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_next_asset_id(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let next_asset_id = sui::bcs::peel_u256(&mut bsc_type);
    next_asset_id
  }

  public fun set_next_asset_id(dapp_hub: &mut DappHub, next_asset_id: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&next_asset_id);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_swap_fee(dapp_hub: &DappHub): u256 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let swap_fee = sui::bcs::peel_u256(&mut bsc_type);
    swap_fee
  }

  public fun set_swap_fee(dapp_hub: &mut DappHub, swap_fee: u256) {
    let key_tuple = vector::empty();
    let value = to_bytes(&swap_fee);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get_fee_to(dapp_hub: &DappHub): address {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let fee_to = sui::bcs::peel_address(&mut bsc_type);
    fee_to
  }

  public fun set_fee_to(dapp_hub: &mut DappHub, fee_to: address) {
    let key_tuple = vector::empty();
    let value = to_bytes(&fee_to);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 2, value);
  }

  public fun get_max_swap_path_len(dapp_hub: &DappHub): u64 {
    let key_tuple = vector::empty();
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3);
    let mut bsc_type = sui::bcs::new(value);
    let max_swap_path_len = sui::bcs::peel_u64(&mut bsc_type);
    max_swap_path_len
  }

  public fun set_max_swap_path_len(dapp_hub: &mut DappHub, max_swap_path_len: u64) {
    let key_tuple = vector::empty();
    let value = to_bytes(&max_swap_path_len);
    dapp_service::set_field(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, 3, value);
  }

  public fun get(dapp_hub: &DappHub): (u256, u256, address, u64) {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let next_asset_id = sui::bcs::peel_u256(&mut bsc_type);
    let swap_fee = sui::bcs::peel_u256(&mut bsc_type);
    let fee_to = sui::bcs::peel_address(&mut bsc_type);
    let max_swap_path_len = sui::bcs::peel_u64(&mut bsc_type);
    (next_asset_id, swap_fee, fee_to, max_swap_path_len)
  }

  public fun set(dapp_hub: &mut DappHub, next_asset_id: u256, swap_fee: u256, fee_to: address, max_swap_path_len: u64) {
    let key_tuple = vector::empty();
    let value_tuple = encode(next_asset_id, swap_fee, fee_to, max_swap_path_len);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub): DubheConfig {
    let key_tuple = vector::empty();
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, dubhe_config: DubheConfig) {
    let key_tuple = vector::empty();
    let value_tuple = encode_struct(dubhe_config);
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(next_asset_id: u256, swap_fee: u256, fee_to: address, max_swap_path_len: u64): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&next_asset_id));
    value_tuple.push_back(to_bytes(&swap_fee));
    value_tuple.push_back(to_bytes(&fee_to));
    value_tuple.push_back(to_bytes(&max_swap_path_len));
    value_tuple
  }

  public fun encode_struct(dubhe_config: DubheConfig): vector<vector<u8>> {
    encode(dubhe_config.next_asset_id, dubhe_config.swap_fee, dubhe_config.fee_to, dubhe_config.max_swap_path_len)
  }

  public fun decode(data: vector<u8>): DubheConfig {
    let mut bsc_type = sui::bcs::new(data);
    let next_asset_id = sui::bcs::peel_u256(&mut bsc_type);
    let swap_fee = sui::bcs::peel_u256(&mut bsc_type);
    let fee_to = sui::bcs::peel_address(&mut bsc_type);
    let max_swap_path_len = sui::bcs::peel_u64(&mut bsc_type);
    DubheConfig {
            next_asset_id,
            swap_fee,
            fee_to,
            max_swap_path_len,
        }
  }
}
