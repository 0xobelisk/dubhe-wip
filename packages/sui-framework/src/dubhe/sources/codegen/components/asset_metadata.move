  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dubhe_asset_metadata {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use dubhe::dubhe_dapp_key;

  use dubhe::dubhe_dapp_key::DappKey;

  use dubhe::dubhe_asset_status;

  use dubhe::dubhe_asset_status::{AssetStatus};

  use dubhe::dubhe_asset_type;

  use dubhe::dubhe_asset_type::{AssetType};

  const TABLE_NAME: vector<u8> = b"asset_metadata";

  public struct Asset_metadata has copy, drop, store {
    name: vector<u8>,
    symbol: vector<u8>,
    description: vector<u8>,
    decimals: u8,
    icon_url: vector<u8>,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  }

  public fun new(
    name: vector<u8>,
    symbol: vector<u8>,
    description: vector<u8>,
    decimals: u8,
    icon_url: vector<u8>,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  ): Asset_metadata {
    Asset_metadata {
            name,
            symbol,
            description,
            decimals,
            icon_url,
            owner,
            supply,
            accounts,
            status,
            is_mintable,
            is_burnable,
            is_freezable,
            asset_type,
        }
  }

  public fun name(self: &Asset_metadata): vector<u8> {
    self.name
  }

  public fun symbol(self: &Asset_metadata): vector<u8> {
    self.symbol
  }

  public fun description(self: &Asset_metadata): vector<u8> {
    self.description
  }

  public fun decimals(self: &Asset_metadata): u8 {
    self.decimals
  }

  public fun icon_url(self: &Asset_metadata): vector<u8> {
    self.icon_url
  }

  public fun owner(self: &Asset_metadata): address {
    self.owner
  }

  public fun supply(self: &Asset_metadata): u256 {
    self.supply
  }

  public fun accounts(self: &Asset_metadata): u256 {
    self.accounts
  }

  public fun status(self: &Asset_metadata): AssetStatus {
    self.status
  }

  public fun is_mintable(self: &Asset_metadata): bool {
    self.is_mintable
  }

  public fun is_burnable(self: &Asset_metadata): bool {
    self.is_burnable
  }

  public fun is_freezable(self: &Asset_metadata): bool {
    self.is_freezable
  }

  public fun asset_type(self: &Asset_metadata): AssetType {
    self.asset_type
  }

  public fun update_name(self: &mut Asset_metadata, name: vector<u8>) {
    self.name = name
  }

  public fun update_symbol(self: &mut Asset_metadata, symbol: vector<u8>) {
    self.symbol = symbol
  }

  public fun update_description(self: &mut Asset_metadata, description: vector<u8>) {
    self.description = description
  }

  public fun update_decimals(self: &mut Asset_metadata, decimals: u8) {
    self.decimals = decimals
  }

  public fun update_icon_url(self: &mut Asset_metadata, icon_url: vector<u8>) {
    self.icon_url = icon_url
  }

  public fun update_owner(self: &mut Asset_metadata, owner: address) {
    self.owner = owner
  }

  public fun update_supply(self: &mut Asset_metadata, supply: u256) {
    self.supply = supply
  }

  public fun update_accounts(self: &mut Asset_metadata, accounts: u256) {
    self.accounts = accounts
  }

  public fun update_status(self: &mut Asset_metadata, status: AssetStatus) {
    self.status = status
  }

  public fun update_is_mintable(self: &mut Asset_metadata, is_mintable: bool) {
    self.is_mintable = is_mintable
  }

  public fun update_is_burnable(self: &mut Asset_metadata, is_burnable: bool) {
    self.is_burnable = is_burnable
  }

  public fun update_is_freezable(self: &mut Asset_metadata, is_freezable: bool) {
    self.is_freezable = is_freezable
  }

  public fun update_asset_type(self: &mut Asset_metadata, asset_type: AssetType) {
    self.asset_type = asset_type
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"address"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"vector<u8>", b"vector<u8>", b"vector<u8>", b"u8", b"vector<u8>", b"address", b"u256", b"u256", b"AssetStatus", b"bool", b"bool", b"bool", b"AssetType"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"id"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"name", b"symbol", b"description", b"decimals", b"icon_url", b"owner", b"supply", b"accounts", b"status", b"is_mintable", b"is_burnable", b"is_freezable", b"asset_type"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dubhe_dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_name(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_name(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_name(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_symbol(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_symbol(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_symbol(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun has_description(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_has_description(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_not_has_description(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun has_decimals(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun ensure_has_decimals(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun ensure_not_has_decimals(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3)
  }

  public fun has_icon_url(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4)
  }

  public fun ensure_has_icon_url(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4)
  }

  public fun ensure_not_has_icon_url(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4)
  }

  public fun has_owner(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 5)
  }

  public fun ensure_has_owner(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 5)
  }

  public fun ensure_not_has_owner(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 5)
  }

  public fun has_supply(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 6)
  }

  public fun ensure_has_supply(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 6)
  }

  public fun ensure_not_has_supply(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 6)
  }

  public fun has_accounts(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 7)
  }

  public fun ensure_has_accounts(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 7)
  }

  public fun ensure_not_has_accounts(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 7)
  }

  public fun has_status(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 8)
  }

  public fun ensure_has_status(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 8)
  }

  public fun ensure_not_has_status(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 8)
  }

  public fun has_is_mintable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 9)
  }

  public fun ensure_has_is_mintable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 9)
  }

  public fun ensure_not_has_is_mintable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 9)
  }

  public fun has_is_burnable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 10)
  }

  public fun ensure_has_is_burnable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 10)
  }

  public fun ensure_not_has_is_burnable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 10)
  }

  public fun has_is_freezable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 11)
  }

  public fun ensure_has_is_freezable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 11)
  }

  public fun ensure_not_has_is_freezable(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 11)
  }

  public fun has_asset_type(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 12)
  }

  public fun ensure_has_asset_type(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 12)
  }

  public fun ensure_not_has_asset_type(dapp_hub: &DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 12)
  }

  public fun delete(dapp_hub: &mut DappHub, id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    dapp_service::delete_record<DappKey>(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_name(dapp_hub: &DappHub, id: address): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    name
  }

  public fun set_name(dapp_hub: &mut DappHub, id: address, name: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&name);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_symbol(dapp_hub: &DappHub, id: address): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let symbol = sui::bcs::peel_vec_u8(&mut bsc_type);
    symbol
  }

  public fun set_symbol(dapp_hub: &mut DappHub, id: address, symbol: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&symbol);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get_description(dapp_hub: &DappHub, id: address): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    description
  }

  public fun set_description(dapp_hub: &mut DappHub, id: address, description: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&description);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 2, value);
  }

  public fun get_decimals(dapp_hub: &DappHub, id: address): u8 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 3);
    let mut bsc_type = sui::bcs::new(value);
    let decimals = sui::bcs::peel_u8(&mut bsc_type);
    decimals
  }

  public fun set_decimals(dapp_hub: &mut DappHub, id: address, decimals: u8) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&decimals);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 3, value);
  }

  public fun get_icon_url(dapp_hub: &DappHub, id: address): vector<u8> {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 4);
    let mut bsc_type = sui::bcs::new(value);
    let icon_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    icon_url
  }

  public fun set_icon_url(dapp_hub: &mut DappHub, id: address, icon_url: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&icon_url);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 4, value);
  }

  public fun get_owner(dapp_hub: &DappHub, id: address): address {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 5);
    let mut bsc_type = sui::bcs::new(value);
    let owner = sui::bcs::peel_address(&mut bsc_type);
    owner
  }

  public fun set_owner(dapp_hub: &mut DappHub, id: address, owner: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&owner);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 5, value);
  }

  public fun get_supply(dapp_hub: &DappHub, id: address): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 6);
    let mut bsc_type = sui::bcs::new(value);
    let supply = sui::bcs::peel_u256(&mut bsc_type);
    supply
  }

  public fun set_supply(dapp_hub: &mut DappHub, id: address, supply: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&supply);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 6, value);
  }

  public fun get_accounts(dapp_hub: &DappHub, id: address): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 7);
    let mut bsc_type = sui::bcs::new(value);
    let accounts = sui::bcs::peel_u256(&mut bsc_type);
    accounts
  }

  public fun set_accounts(dapp_hub: &mut DappHub, id: address, accounts: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&accounts);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 7, value);
  }

  public fun get_status(dapp_hub: &DappHub, id: address): AssetStatus {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 8);
    let mut bsc_type = sui::bcs::new(value);
    let status = dubhe::dubhe_asset_status::decode(&mut bsc_type);
    status
  }

  public fun set_status(dapp_hub: &mut DappHub, id: address, status: AssetStatus) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dubhe::dubhe_asset_status::encode(status);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 8, value);
  }

  public fun get_is_mintable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 9);
    let mut bsc_type = sui::bcs::new(value);
    let is_mintable = sui::bcs::peel_bool(&mut bsc_type);
    is_mintable
  }

  public fun set_is_mintable(dapp_hub: &mut DappHub, id: address, is_mintable: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&is_mintable);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 9, value);
  }

  public fun get_is_burnable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 10);
    let mut bsc_type = sui::bcs::new(value);
    let is_burnable = sui::bcs::peel_bool(&mut bsc_type);
    is_burnable
  }

  public fun set_is_burnable(dapp_hub: &mut DappHub, id: address, is_burnable: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&is_burnable);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 10, value);
  }

  public fun get_is_freezable(dapp_hub: &DappHub, id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 11);
    let mut bsc_type = sui::bcs::new(value);
    let is_freezable = sui::bcs::peel_bool(&mut bsc_type);
    is_freezable
  }

  public fun set_is_freezable(dapp_hub: &mut DappHub, id: address, is_freezable: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = to_bytes(&is_freezable);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 11, value);
  }

  public fun get_asset_type(dapp_hub: &DappHub, id: address): AssetType {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 12);
    let mut bsc_type = sui::bcs::new(value);
    let asset_type = dubhe::dubhe_asset_type::decode(&mut bsc_type);
    asset_type
  }

  public fun set_asset_type(dapp_hub: &mut DappHub, id: address, asset_type: AssetType) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value = dubhe::dubhe_asset_type::encode(asset_type);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 12, value);
  }

  public fun get(
    dapp_hub: &DappHub,
    id: address,
  ): (vector<u8>, vector<u8>, vector<u8>, u8, vector<u8>, address, u256, u256, AssetStatus, bool, bool, bool, AssetType) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    let symbol = sui::bcs::peel_vec_u8(&mut bsc_type);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    let decimals = sui::bcs::peel_u8(&mut bsc_type);
    let icon_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    let owner = sui::bcs::peel_address(&mut bsc_type);
    let supply = sui::bcs::peel_u256(&mut bsc_type);
    let accounts = sui::bcs::peel_u256(&mut bsc_type);
    let status = dubhe::dubhe_asset_status::decode(&mut bsc_type);
    let is_mintable = sui::bcs::peel_bool(&mut bsc_type);
    let is_burnable = sui::bcs::peel_bool(&mut bsc_type);
    let is_freezable = sui::bcs::peel_bool(&mut bsc_type);
    let asset_type = dubhe::dubhe_asset_type::decode(&mut bsc_type);
    (name, symbol, description, decimals, icon_url, owner, supply, accounts, status, is_mintable, is_burnable, is_freezable, asset_type)
  }

  public fun set(
    dapp_hub: &mut DappHub,
    id: address,
    name: vector<u8>,
    symbol: vector<u8>,
    description: vector<u8>,
    decimals: u8,
    icon_url: vector<u8>,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  ) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = encode(name, symbol, description, decimals, icon_url, owner, supply, accounts, status, is_mintable, is_burnable, is_freezable, asset_type);
    dapp_service::set_record(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, id: address): Asset_metadata {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, id: address, asset_metadata: Asset_metadata) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&id));
    let value_tuple = encode_struct(asset_metadata);
    dapp_service::set_record(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(
    name: vector<u8>,
    symbol: vector<u8>,
    description: vector<u8>,
    decimals: u8,
    icon_url: vector<u8>,
    owner: address,
    supply: u256,
    accounts: u256,
    status: AssetStatus,
    is_mintable: bool,
    is_burnable: bool,
    is_freezable: bool,
    asset_type: AssetType,
  ): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&name));
    value_tuple.push_back(to_bytes(&symbol));
    value_tuple.push_back(to_bytes(&description));
    value_tuple.push_back(to_bytes(&decimals));
    value_tuple.push_back(to_bytes(&icon_url));
    value_tuple.push_back(to_bytes(&owner));
    value_tuple.push_back(to_bytes(&supply));
    value_tuple.push_back(to_bytes(&accounts));
    value_tuple.push_back(dubhe::dubhe_asset_status::encode(status));
    value_tuple.push_back(to_bytes(&is_mintable));
    value_tuple.push_back(to_bytes(&is_burnable));
    value_tuple.push_back(to_bytes(&is_freezable));
    value_tuple.push_back(dubhe::dubhe_asset_type::encode(asset_type));
    value_tuple
  }

  public fun encode_struct(asset_metadata: Asset_metadata): vector<vector<u8>> {
    encode(asset_metadata.name, asset_metadata.symbol, asset_metadata.description, asset_metadata.decimals, asset_metadata.icon_url, asset_metadata.owner, asset_metadata.supply, asset_metadata.accounts, asset_metadata.status, asset_metadata.is_mintable, asset_metadata.is_burnable, asset_metadata.is_freezable, asset_metadata.asset_type)
  }

  public fun decode(data: vector<u8>): Asset_metadata {
    let mut bsc_type = sui::bcs::new(data);
    let name = sui::bcs::peel_vec_u8(&mut bsc_type);
    let symbol = sui::bcs::peel_vec_u8(&mut bsc_type);
    let description = sui::bcs::peel_vec_u8(&mut bsc_type);
    let decimals = sui::bcs::peel_u8(&mut bsc_type);
    let icon_url = sui::bcs::peel_vec_u8(&mut bsc_type);
    let owner = sui::bcs::peel_address(&mut bsc_type);
    let supply = sui::bcs::peel_u256(&mut bsc_type);
    let accounts = sui::bcs::peel_u256(&mut bsc_type);
    let status = dubhe::dubhe_asset_status::decode(&mut bsc_type);
    let is_mintable = sui::bcs::peel_bool(&mut bsc_type);
    let is_burnable = sui::bcs::peel_bool(&mut bsc_type);
    let is_freezable = sui::bcs::peel_bool(&mut bsc_type);
    let asset_type = dubhe::dubhe_asset_type::decode(&mut bsc_type);
    Asset_metadata {
            name,
            symbol,
            description,
            decimals,
            icon_url,
            owner,
            supply,
            accounts,
            status,
            is_mintable,
            is_burnable,
            is_freezable,
            asset_type,
        }
  }
}
