  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module dubhe::dubhe_bridge {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use dubhe::dubhe_dapp_key;

  use dubhe::dubhe_dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"bridge";

  public struct Bridge has copy, drop, store {
    min_amount: u256,
    fee: u256,
    opened: bool,
  }

  public fun new(min_amount: u256, fee: u256, opened: bool): Bridge {
    Bridge {
            min_amount,
            fee,
            opened,
        }
  }

  public fun min_amount(self: &Bridge): u256 {
    self.min_amount
  }

  public fun fee(self: &Bridge): u256 {
    self.fee
  }

  public fun opened(self: &Bridge): bool {
    self.opened
  }

  public fun update_min_amount(self: &mut Bridge, min_amount: u256) {
    self.min_amount = min_amount
  }

  public fun update_fee(self: &mut Bridge, fee: u256) {
    self.fee = fee
  }

  public fun update_opened(self: &mut Bridge, opened: bool) {
    self.opened = opened
  }

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"vector<u8>"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[b"u256", b"u256", b"bool"]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"chain"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[b"min_amount", b"fee", b"opened"]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dubhe_dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, chain: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun has_min_amount(dapp_hub: &DappHub, chain: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_has_min_amount(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun ensure_not_has_min_amount(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0)
  }

  public fun has_fee(dapp_hub: &DappHub, chain: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_has_fee(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun ensure_not_has_fee(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1)
  }

  public fun has_opened(dapp_hub: &DappHub, chain: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_has_opened(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun ensure_not_has_opened(dapp_hub: &DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::ensure_not_has_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2)
  }

  public fun delete(dapp_hub: &mut DappHub, chain: vector<u8>) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    dapp_service::delete_record<DappKey>(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun get_min_amount(dapp_hub: &DappHub, chain: vector<u8>): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 0);
    let mut bsc_type = sui::bcs::new(value);
    let min_amount = sui::bcs::peel_u256(&mut bsc_type);
    min_amount
  }

  public fun set_min_amount(dapp_hub: &mut DappHub, chain: vector<u8>, min_amount: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = to_bytes(&min_amount);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 0, value);
  }

  public fun get_fee(dapp_hub: &DappHub, chain: vector<u8>): u256 {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 1);
    let mut bsc_type = sui::bcs::new(value);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    fee
  }

  public fun set_fee(dapp_hub: &mut DappHub, chain: vector<u8>, fee: u256) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = to_bytes(&fee);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 1, value);
  }

  public fun get_opened(dapp_hub: &DappHub, chain: vector<u8>): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = dapp_service::get_field<DappKey>(dapp_hub, get_table_id(), key_tuple, 2);
    let mut bsc_type = sui::bcs::new(value);
    let opened = sui::bcs::peel_bool(&mut bsc_type);
    opened
  }

  public fun set_opened(dapp_hub: &mut DappHub, chain: vector<u8>, opened: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value = to_bytes(&opened);
    dapp_service::set_field(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, 2, value);
  }

  public fun get(dapp_hub: &DappHub, chain: vector<u8>): (u256, u256, bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    let mut bsc_type = sui::bcs::new(value_tuple);
    let min_amount = sui::bcs::peel_u256(&mut bsc_type);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    let opened = sui::bcs::peel_bool(&mut bsc_type);
    (min_amount, fee, opened)
  }

  public fun set(dapp_hub: &mut DappHub, chain: vector<u8>, min_amount: u256, fee: u256, opened: bool) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value_tuple = encode(min_amount, fee, opened);
    dapp_service::set_record(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun get_struct(dapp_hub: &DappHub, chain: vector<u8>): Bridge {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value_tuple = dapp_service::get_record<DappKey>(dapp_hub, get_table_id(), key_tuple);
    decode(value_tuple)
  }

  public fun set_struct(dapp_hub: &mut DappHub, chain: vector<u8>, bridge: Bridge) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&chain));
    let value_tuple = encode_struct(bridge);
    dapp_service::set_record(dapp_hub, dubhe_dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }

  public fun encode(min_amount: u256, fee: u256, opened: bool): vector<vector<u8>> {
    let mut value_tuple = vector::empty();
    value_tuple.push_back(to_bytes(&min_amount));
    value_tuple.push_back(to_bytes(&fee));
    value_tuple.push_back(to_bytes(&opened));
    value_tuple
  }

  public fun encode_struct(bridge: Bridge): vector<vector<u8>> {
    encode(bridge.min_amount, bridge.fee, bridge.opened)
  }

  public fun decode(data: vector<u8>): Bridge {
    let mut bsc_type = sui::bcs::new(data);
    let min_amount = sui::bcs::peel_u256(&mut bsc_type);
    let fee = sui::bcs::peel_u256(&mut bsc_type);
    let opened = sui::bcs::peel_bool(&mut bsc_type);
    Bridge {
            min_amount,
            fee,
            opened,
        }
  }
}
