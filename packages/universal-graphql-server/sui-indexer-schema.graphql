"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `StoreAccount`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreAccount`."""
    orderBy: [StoreAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreAccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreAccountFilter
  ): StoreAccountsConnection

  """Reads and enables pagination through a set of `StoreEncounter`."""
  encounters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreEncounter`."""
    orderBy: [StoreEncountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreEncounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreEncounterFilter
  ): StoreEncountersConnection

  """Reads and enables pagination through a set of `StoreMapConfig`."""
  mapConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreMapConfig`."""
    orderBy: [StoreMapConfigsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreMapConfigCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreMapConfigFilter
  ): StoreMapConfigsConnection

  """Reads and enables pagination through a set of `StorePosition`."""
  positions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StorePosition`."""
    orderBy: [StorePositionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StorePositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StorePositionFilter
  ): StorePositionsConnection

  """Reads and enables pagination through a set of `TableField`."""
  tableFields(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TableField`."""
    orderBy: [TableFieldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TableFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TableFieldFilter
  ): TableFieldsConnection
  accountByAssetIdAndAccount(assetId: String!, account: String!): StoreAccount
  encounterByPlayer(player: String!): StoreEncounter
  positionByPlayer(player: String!): StorePosition
  tableFieldByTableNameAndFieldName(tableName: String!, fieldName: String!): TableField

  """Reads a single `StoreAccount` using its globally unique `ID`."""
  account(
    """
    The globally unique `ID` to be used in selecting a single `StoreAccount`.
    """
    nodeId: ID!
  ): StoreAccount

  """Reads a single `StoreEncounter` using its globally unique `ID`."""
  encounter(
    """
    The globally unique `ID` to be used in selecting a single `StoreEncounter`.
    """
    nodeId: ID!
  ): StoreEncounter

  """Reads a single `StorePosition` using its globally unique `ID`."""
  position(
    """
    The globally unique `ID` to be used in selecting a single `StorePosition`.
    """
    nodeId: ID!
  ): StorePosition

  """Reads a single `TableField` using its globally unique `ID`."""
  tableField(
    """
    The globally unique `ID` to be used in selecting a single `TableField`.
    """
    nodeId: ID!
  ): TableField
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `StoreAccount` values."""
type StoreAccountsConnection {
  """A list of `StoreAccount` objects."""
  nodes: [StoreAccount!]!

  """
  A list of edges which contains the `StoreAccount` and cursor to aid in pagination.
  """
  edges: [StoreAccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StoreAccount` you could get from the connection."""
  totalCount: Int!
}

type StoreAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  assetId: String!
  account: String!
  balance: String
}

"""A `StoreAccount` edge in the connection."""
type StoreAccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StoreAccount` at the end of the edge."""
  node: StoreAccount!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `StoreAccount`."""
enum StoreAccountsOrderBy {
  NATURAL
  ASSET_ID_ASC
  ASSET_ID_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  BALANCE_ASC
  BALANCE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StoreAccount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StoreAccountCondition {
  """Checks for equality with the object’s `assetId` field."""
  assetId: String

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `balance` field."""
  balance: String
}

"""
A filter to be used against `StoreAccount` object types. All fields are combined with a logical ‘and.’
"""
input StoreAccountFilter {
  """Filter by the object’s `assetId` field."""
  assetId: StringFilter

  """Filter by the object’s `account` field."""
  account: StringFilter

  """Filter by the object’s `balance` field."""
  balance: StringFilter

  """Checks for all expressions in this list."""
  and: [StoreAccountFilter!]

  """Checks for any expressions in this list."""
  or: [StoreAccountFilter!]

  """Negates the expression."""
  not: StoreAccountFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String
}

"""A connection to a list of `StoreEncounter` values."""
type StoreEncountersConnection {
  """A list of `StoreEncounter` objects."""
  nodes: [StoreEncounter!]!

  """
  A list of edges which contains the `StoreEncounter` and cursor to aid in pagination.
  """
  edges: [StoreEncountersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StoreEncounter` you could get from the connection."""
  totalCount: Int!
}

type StoreEncounter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  player: String!
  exists: Boolean
  monster: String
  catchAttempts: String
}

"""A `StoreEncounter` edge in the connection."""
type StoreEncountersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StoreEncounter` at the end of the edge."""
  node: StoreEncounter!
}

"""Methods to use when ordering `StoreEncounter`."""
enum StoreEncountersOrderBy {
  NATURAL
  PLAYER_ASC
  PLAYER_DESC
  EXISTS_ASC
  EXISTS_DESC
  MONSTER_ASC
  MONSTER_DESC
  CATCH_ATTEMPTS_ASC
  CATCH_ATTEMPTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StoreEncounter` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StoreEncounterCondition {
  """Checks for equality with the object’s `player` field."""
  player: String

  """Checks for equality with the object’s `exists` field."""
  exists: Boolean

  """Checks for equality with the object’s `monster` field."""
  monster: String

  """Checks for equality with the object’s `catchAttempts` field."""
  catchAttempts: String
}

"""
A filter to be used against `StoreEncounter` object types. All fields are combined with a logical ‘and.’
"""
input StoreEncounterFilter {
  """Filter by the object’s `player` field."""
  player: StringFilter

  """Filter by the object’s `exists` field."""
  exists: BooleanFilter

  """Filter by the object’s `monster` field."""
  monster: StringFilter

  """Filter by the object’s `catchAttempts` field."""
  catchAttempts: StringFilter

  """Checks for all expressions in this list."""
  and: [StoreEncounterFilter!]

  """Checks for any expressions in this list."""
  or: [StoreEncounterFilter!]

  """Negates the expression."""
  not: StoreEncounterFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `StoreMapConfig` values."""
type StoreMapConfigsConnection {
  """A list of `StoreMapConfig` objects."""
  nodes: [StoreMapConfig!]!

  """
  A list of edges which contains the `StoreMapConfig` and cursor to aid in pagination.
  """
  edges: [StoreMapConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StoreMapConfig` you could get from the connection."""
  totalCount: Int!
}

type StoreMapConfig {
  width: String
  height: String
}

"""A `StoreMapConfig` edge in the connection."""
type StoreMapConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StoreMapConfig` at the end of the edge."""
  node: StoreMapConfig!
}

"""Methods to use when ordering `StoreMapConfig`."""
enum StoreMapConfigsOrderBy {
  NATURAL
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
}

"""
A condition to be used against `StoreMapConfig` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StoreMapConfigCondition {
  """Checks for equality with the object’s `width` field."""
  width: String

  """Checks for equality with the object’s `height` field."""
  height: String
}

"""
A filter to be used against `StoreMapConfig` object types. All fields are combined with a logical ‘and.’
"""
input StoreMapConfigFilter {
  """Filter by the object’s `width` field."""
  width: StringFilter

  """Filter by the object’s `height` field."""
  height: StringFilter

  """Checks for all expressions in this list."""
  and: [StoreMapConfigFilter!]

  """Checks for any expressions in this list."""
  or: [StoreMapConfigFilter!]

  """Negates the expression."""
  not: StoreMapConfigFilter
}

"""A connection to a list of `StorePosition` values."""
type StorePositionsConnection {
  """A list of `StorePosition` objects."""
  nodes: [StorePosition!]!

  """
  A list of edges which contains the `StorePosition` and cursor to aid in pagination.
  """
  edges: [StorePositionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StorePosition` you could get from the connection."""
  totalCount: Int!
}

type StorePosition implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  player: String!
  x: String
  y: String
}

"""A `StorePosition` edge in the connection."""
type StorePositionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StorePosition` at the end of the edge."""
  node: StorePosition!
}

"""Methods to use when ordering `StorePosition`."""
enum StorePositionsOrderBy {
  NATURAL
  PLAYER_ASC
  PLAYER_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StorePosition` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StorePositionCondition {
  """Checks for equality with the object’s `player` field."""
  player: String

  """Checks for equality with the object’s `x` field."""
  x: String

  """Checks for equality with the object’s `y` field."""
  y: String
}

"""
A filter to be used against `StorePosition` object types. All fields are combined with a logical ‘and.’
"""
input StorePositionFilter {
  """Filter by the object’s `player` field."""
  player: StringFilter

  """Filter by the object’s `x` field."""
  x: StringFilter

  """Filter by the object’s `y` field."""
  y: StringFilter

  """Checks for all expressions in this list."""
  and: [StorePositionFilter!]

  """Checks for any expressions in this list."""
  or: [StorePositionFilter!]

  """Negates the expression."""
  not: StorePositionFilter
}

"""A connection to a list of `TableField` values."""
type TableFieldsConnection {
  """A list of `TableField` objects."""
  nodes: [TableField!]!

  """
  A list of edges which contains the `TableField` and cursor to aid in pagination.
  """
  edges: [TableFieldsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TableField` you could get from the connection."""
  totalCount: Int!
}

type TableField implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tableName: String!
  fieldName: String!
  fieldType: String
  fieldIndex: Int
  isKey: Boolean
}

"""A `TableField` edge in the connection."""
type TableFieldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TableField` at the end of the edge."""
  node: TableField!
}

"""Methods to use when ordering `TableField`."""
enum TableFieldsOrderBy {
  NATURAL
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  FIELD_NAME_ASC
  FIELD_NAME_DESC
  FIELD_TYPE_ASC
  FIELD_TYPE_DESC
  FIELD_INDEX_ASC
  FIELD_INDEX_DESC
  IS_KEY_ASC
  IS_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TableField` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TableFieldCondition {
  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `fieldName` field."""
  fieldName: String

  """Checks for equality with the object’s `fieldType` field."""
  fieldType: String

  """Checks for equality with the object’s `fieldIndex` field."""
  fieldIndex: Int

  """Checks for equality with the object’s `isKey` field."""
  isKey: Boolean
}

"""
A filter to be used against `TableField` object types. All fields are combined with a logical ‘and.’
"""
input TableFieldFilter {
  """Filter by the object’s `tableName` field."""
  tableName: StringFilter

  """Filter by the object’s `fieldName` field."""
  fieldName: StringFilter

  """Filter by the object’s `fieldType` field."""
  fieldType: StringFilter

  """Filter by the object’s `fieldIndex` field."""
  fieldIndex: IntFilter

  """Filter by the object’s `isKey` field."""
  isKey: BooleanFilter

  """Checks for all expressions in this list."""
  and: [TableFieldFilter!]

  """Checks for any expressions in this list."""
  or: [TableFieldFilter!]

  """Negates the expression."""
  not: TableFieldFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `StoreAccount`. (live)"""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreAccount`."""
    orderBy: [StoreAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreAccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreAccountFilter
  ): StoreAccountsConnection

  """Reads and enables pagination through a set of `StoreEncounter`. (live)"""
  encounters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreEncounter`."""
    orderBy: [StoreEncountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreEncounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreEncounterFilter
  ): StoreEncountersConnection

  """Reads and enables pagination through a set of `StoreMapConfig`. (live)"""
  mapConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StoreMapConfig`."""
    orderBy: [StoreMapConfigsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreMapConfigCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreMapConfigFilter
  ): StoreMapConfigsConnection

  """Reads and enables pagination through a set of `StorePosition`. (live)"""
  positions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StorePosition`."""
    orderBy: [StorePositionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StorePositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StorePositionFilter
  ): StorePositionsConnection

  """Reads and enables pagination through a set of `TableField`. (live)"""
  tableFields(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TableField`."""
    orderBy: [TableFieldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TableFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TableFieldFilter
  ): TableFieldsConnection

  """ (live)"""
  accountByAssetIdAndAccount(assetId: String!, account: String!): StoreAccount

  """ (live)"""
  encounterByPlayer(player: String!): StoreEncounter

  """ (live)"""
  positionByPlayer(player: String!): StorePosition

  """ (live)"""
  tableFieldByTableNameAndFieldName(tableName: String!, fieldName: String!): TableField

  """Reads a single `StoreAccount` using its globally unique `ID`. (live)"""
  account(
    """
    The globally unique `ID` to be used in selecting a single `StoreAccount`.
    """
    nodeId: ID!
  ): StoreAccount

  """Reads a single `StoreEncounter` using its globally unique `ID`. (live)"""
  encounter(
    """
    The globally unique `ID` to be used in selecting a single `StoreEncounter`.
    """
    nodeId: ID!
  ): StoreEncounter

  """Reads a single `StorePosition` using its globally unique `ID`. (live)"""
  position(
    """
    The globally unique `ID` to be used in selecting a single `StorePosition`.
    """
    nodeId: ID!
  ): StorePosition

  """Reads a single `TableField` using its globally unique `ID`. (live)"""
  tableField(
    """
    The globally unique `ID` to be used in selecting a single `TableField`.
    """
    nodeId: ID!
  ): TableField
}
