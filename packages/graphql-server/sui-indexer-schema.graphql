"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `accounts` values."""
type AccountsConnection {
  """A list of `accounts` objects."""
  nodes: [accounts!]!

  """
  A list of edges which contains the `accounts` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `accounts` you could get from the connection."""
  totalCount: Int!
}

type accounts implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  assetId: String!
  account: String!
  balance: String
}

"""A `accounts` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `accounts` at the end of the edge."""
  node: accounts!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `accounts`."""
enum AccountsOrderBy {
  NATURAL
  ASSET_ID_ASC
  ASSET_ID_DESC
  ACCOUNT_ASC
  ACCOUNT_DESC
  BALANCE_ASC
  BALANCE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `accounts` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AccountsCondition {
  """Checks for equality with the object’s `assetId` field."""
  assetId: String

  """Checks for equality with the object’s `account` field."""
  account: String

  """Checks for equality with the object’s `balance` field."""
  balance: String
}

"""
A filter to be used against `accounts` object types. All fields are combined with a logical ‘and.’
"""
input accountsFilter {
  """Filter by the object’s `assetId` field."""
  assetId: StringFilter

  """Filter by the object’s `account` field."""
  account: StringFilter

  """Filter by the object’s `balance` field."""
  balance: StringFilter

  """Checks for all expressions in this list."""
  and: [accountsFilter!]

  """Checks for any expressions in this list."""
  or: [accountsFilter!]

  """Negates the expression."""
  not: accountsFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String
}

"""A connection to a list of `encounter` values."""
type EncountersConnection {
  """A list of `encounter` objects."""
  nodes: [encounter!]!

  """
  A list of edges which contains the `encounter` and cursor to aid in pagination.
  """
  edges: [EncountersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `encounter` you could get from the connection."""
  totalCount: Int!
}

type encounter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  player: String!
  exists: Boolean
  monster: String
  catchAttempts: String
}

"""A `encounter` edge in the connection."""
type EncountersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `encounter` at the end of the edge."""
  node: encounter!
}

"""Methods to use when ordering `encounter`."""
enum EncountersOrderBy {
  NATURAL
  PLAYER_ASC
  PLAYER_DESC
  EXISTS_ASC
  EXISTS_DESC
  MONSTER_ASC
  MONSTER_DESC
  CATCH_ATTEMPTS_ASC
  CATCH_ATTEMPTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `encounter` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EncounterCondition {
  """Checks for equality with the object’s `player` field."""
  player: String

  """Checks for equality with the object’s `exists` field."""
  exists: Boolean

  """Checks for equality with the object’s `monster` field."""
  monster: String

  """Checks for equality with the object’s `catchAttempts` field."""
  catchAttempts: String
}

"""
A filter to be used against `encounter` object types. All fields are combined with a logical ‘and.’
"""
input encounterFilter {
  """Filter by the object’s `player` field."""
  player: StringFilter

  """Filter by the object’s `exists` field."""
  exists: BooleanFilter

  """Filter by the object’s `monster` field."""
  monster: StringFilter

  """Filter by the object’s `catchAttempts` field."""
  catchAttempts: StringFilter

  """Checks for all expressions in this list."""
  and: [encounterFilter!]

  """Checks for any expressions in this list."""
  or: [encounterFilter!]

  """Negates the expression."""
  not: encounterFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `mapConfig` values."""
type MapConfigsConnection {
  """A list of `mapConfig` objects."""
  nodes: [mapConfig!]!

  """
  A list of edges which contains the `mapConfig` and cursor to aid in pagination.
  """
  edges: [MapConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `mapConfig` you could get from the connection."""
  totalCount: Int!
}

type mapConfig {
  width: String
  height: String
}

"""A `mapConfig` edge in the connection."""
type MapConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `mapConfig` at the end of the edge."""
  node: mapConfig!
}

"""Methods to use when ordering `mapConfig`."""
enum MapConfigsOrderBy {
  NATURAL
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
}

"""
A condition to be used against `mapConfig` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MapConfigCondition {
  """Checks for equality with the object’s `width` field."""
  width: String

  """Checks for equality with the object’s `height` field."""
  height: String
}

"""
A filter to be used against `mapConfig` object types. All fields are combined with a logical ‘and.’
"""
input mapConfigFilter {
  """Filter by the object’s `width` field."""
  width: StringFilter

  """Filter by the object’s `height` field."""
  height: StringFilter

  """Checks for all expressions in this list."""
  and: [mapConfigFilter!]

  """Checks for any expressions in this list."""
  or: [mapConfigFilter!]

  """Negates the expression."""
  not: mapConfigFilter
}

"""A connection to a list of `position` values."""
type PositionsConnection {
  """A list of `position` objects."""
  nodes: [position!]!

  """
  A list of edges which contains the `position` and cursor to aid in pagination.
  """
  edges: [PositionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `position` you could get from the connection."""
  totalCount: Int!
}

type position implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  player: String!
  x: String
  y: String
}

"""A `position` edge in the connection."""
type PositionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `position` at the end of the edge."""
  node: position!
}

"""Methods to use when ordering `position`."""
enum PositionsOrderBy {
  NATURAL
  PLAYER_ASC
  PLAYER_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `position` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PositionCondition {
  """Checks for equality with the object’s `player` field."""
  player: String

  """Checks for equality with the object’s `x` field."""
  x: String

  """Checks for equality with the object’s `y` field."""
  y: String
}

"""
A filter to be used against `position` object types. All fields are combined with a logical ‘and.’
"""
input positionFilter {
  """Filter by the object’s `player` field."""
  player: StringFilter

  """Filter by the object’s `x` field."""
  x: StringFilter

  """Filter by the object’s `y` field."""
  y: StringFilter

  """Checks for all expressions in this list."""
  and: [positionFilter!]

  """Checks for any expressions in this list."""
  or: [positionFilter!]

  """Negates the expression."""
  not: positionFilter
}

"""A connection to a list of `tableFields` values."""
type TableFieldsConnection {
  """A list of `tableFields` objects."""
  nodes: [tableFields!]!

  """
  A list of edges which contains the `tableFields` and cursor to aid in pagination.
  """
  edges: [TableFieldsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `tableFields` you could get from the connection."""
  totalCount: Int!
}

type tableFields implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tableName: String!
  fieldName: String!
  fieldType: String
  fieldIndex: Int
  isKey: Boolean
}

"""A `tableFields` edge in the connection."""
type TableFieldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `tableFields` at the end of the edge."""
  node: tableFields!
}

"""Methods to use when ordering `tableFields`."""
enum TableFieldsOrderBy {
  NATURAL
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  FIELD_NAME_ASC
  FIELD_NAME_DESC
  FIELD_TYPE_ASC
  FIELD_TYPE_DESC
  FIELD_INDEX_ASC
  FIELD_INDEX_DESC
  IS_KEY_ASC
  IS_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `tableFields` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TableFieldsCondition {
  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `fieldName` field."""
  fieldName: String

  """Checks for equality with the object’s `fieldType` field."""
  fieldType: String

  """Checks for equality with the object’s `fieldIndex` field."""
  fieldIndex: Int

  """Checks for equality with the object’s `isKey` field."""
  isKey: Boolean
}

"""
A filter to be used against `tableFields` object types. All fields are combined with a logical ‘and.’
"""
input tableFieldsFilter {
  """Filter by the object’s `tableName` field."""
  tableName: StringFilter

  """Filter by the object’s `fieldName` field."""
  fieldName: StringFilter

  """Filter by the object’s `fieldType` field."""
  fieldType: StringFilter

  """Filter by the object’s `fieldIndex` field."""
  fieldIndex: IntFilter

  """Filter by the object’s `isKey` field."""
  isKey: BooleanFilter

  """Checks for all expressions in this list."""
  and: [tableFieldsFilter!]

  """Checks for any expressions in this list."""
  or: [tableFieldsFilter!]

  """Negates the expression."""
  not: tableFieldsFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}

scalar LiveSchema

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `accounts`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `accounts`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountsCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: accountsFilter
  ): AccountsConnection

  """Reads and enables pagination through a set of `encounter`."""
  encounters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `encounter`."""
    orderBy: [EncountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EncounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: encounterFilter
  ): EncountersConnection

  """Reads and enables pagination through a set of `mapConfig`."""
  mapConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `mapConfig`."""
    orderBy: [MapConfigsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapConfigCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: mapConfigFilter
  ): MapConfigsConnection

  """Reads and enables pagination through a set of `position`."""
  positions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `position`."""
    orderBy: [PositionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: positionFilter
  ): PositionsConnection

  """Reads and enables pagination through a set of `tableFields`."""
  allTableFields(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `tableFields`."""
    orderBy: [TableFieldsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TableFieldsCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: tableFieldsFilter
  ): TableFieldsConnection
  accountByAssetIdAndAccount(assetId: String!, account: String!): accounts
  encounterByPlayer(player: String!): encounter
  positionByPlayer(player: String!): position
  tableFieldByTableNameAndFieldName(tableName: String!, fieldName: String!): tableFields

  """Reads a single `accounts` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `accounts`."""
    nodeId: ID!
  ): accounts

  """Reads a single `encounter` using its globally unique `ID`."""
  encounter(
    """The globally unique `ID` to be used in selecting a single `encounter`."""
    nodeId: ID!
  ): encounter

  """Reads a single `position` using its globally unique `ID`."""
  position(
    """The globally unique `ID` to be used in selecting a single `position`."""
    nodeId: ID!
  ): position

  """Reads a single `tableFields` using its globally unique `ID`."""
  tableField(
    """
    The globally unique `ID` to be used in selecting a single `tableFields`.
    """
    nodeId: ID!
  ): tableFields

  """获取所有store表的Schema信息"""
  storeSchema: JSON

  """查询指定store表的数据"""
  storeData(table: String!): JSON

  """获取所有可用的store表名列表"""
  availableStoreTables: [String!]!
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  listen(
    topic: String!

    """
    If true, this subscription will trigger an event as soon as it initiates.
    """
    initialEvent: Boolean! = false
  ): ListenPayload!
}
