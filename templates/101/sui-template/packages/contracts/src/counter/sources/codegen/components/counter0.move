  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module counter::counter0 {

  use sui::bcs::{to_bytes};

  use dubhe::table_id;

  use dubhe::dapp_state;

  use dubhe::dapp_service;

  use dubhe::dapp_hub;

  use dubhe::dapp_hub::DappHub;

  use counter::dapp_key;

  use counter::dapp_key::DappKey;

  const TABLE_NAME: vector<u8> = b"counter0";

  public fun get_table_id(): vector<u8> {
    table_id::encode(table_id::onchain_table_type(), TABLE_NAME)
  }

  public fun get_key_schemas(): vector<vector<u8>> {
    vector[b"address"]
  }

  public fun get_value_schemas(): vector<vector<u8>> {
    vector[]
  }

  public fun get_key_names(): vector<vector<u8>> {
    vector[b"entity_id"]
  }

  public fun get_value_names(): vector<vector<u8>> {
    vector[]
  }

  public fun register_table(dapp_hub: &mut DappHub, ctx: &mut TxContext) {
    let dapp_key = dapp_key::new();
    dapp_service::register_table(
            dapp_hub, 
            dapp_key,
            get_table_id(), 
            TABLE_NAME, 
            get_key_schemas(), 
            get_key_names(), 
            get_value_schemas(), 
            get_value_names(), 
            ctx
        );
  }

  public fun has(dapp_hub: &DappHub, entity_id: address): bool {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_service::has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_service::ensure_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun ensure_not_has(dapp_hub: &DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_service::ensure_not_has_record<DappKey>(dapp_hub, get_table_id(), key_tuple)
  }

  public fun delete(dapp_hub: &mut DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    dapp_service::delete_record<DappKey>(dapp_hub, dapp_key::new(), get_table_id(), key_tuple);
  }

  public fun set(dapp_hub: &mut DappHub, entity_id: address) {
    let mut key_tuple = vector::empty();
    key_tuple.push_back(to_bytes(&entity_id));
    let value_tuple = vector::empty();
    dapp_service::set_record(dapp_hub, dapp_key::new(), get_table_id(), key_tuple, value_tuple);
  }
}
